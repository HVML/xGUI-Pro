var get_element_by_hvml_handle;
var get_element_hvml_handle;
var get_element_hvml_event_list;
function checkHVML() {
    if (typeof(document.getElementByHVMLHandle) == "function") {
        get_element_by_hvml_handle = function (handle) {
            return document.getElementByHVMLHandle(handle);
        }

        get_element_hvml_handle = function (elem) {
            return elem.hvmlHandleText;
        }
        get_element_hvml_event_list = function (elem) {
            return elem.hvmlEventList;
        }
    }
    else {
        get_element_by_hvml_handle = function(handle) {
            return document.querySelector("[hvml-handle='" + handle + "']");
        }

        get_element_hvml_handle = function (elem) {
            return elem.getAttribute("hvml-handle");
        }

        get_element_hvml_event_list = function (elem) {
            let events = elem.getAttribute("hvml-events");
            return events.split(' ');
        }
        console.log("You are not using the tailored WebKit developed by HVML community. " +
               "This may slightly affect the performance of xGUI Pro. ");
    }

    if (typeof(HVML) == "object" && HVML.version >= @HVMLJS_VERSION@) {
        let elemStatus = get_element_by_hvml_handle('731128');
        let elemRunner = get_element_by_hvml_handle('790715');
        if (elemStatus && elemRunner) {
            elemStatus.textContent = 'Ready';
            elemRunner.textContent = '@' + HVML.hostName + '/' +
                HVML.appName + '/' + HVML.runnerName;
        }
        else {
            console.log("A new HVML content loaded");
        }
    }
    else {
        console.log("Make sure to use the correct version of xGUI Pro");
    }

    return true;
}

if (checkHVML()) {
    // blank page handle this event
    window.addEventListener("load", (event) => {
        let data = {
            "src": "load",
        };
        HVML.post("page-loaded", "doc",
            "blank",
            JSON.stringify(data));
    });
    HVML.onrequest = function (json) {
        const dom_update_ops = ['append', 'prepend', 'insertAfter',
              'insertBefore', 'displace'];

        msg = JSON.parse(json);

        if (msg.operation === 'load') {
            let data = {
                "src": "load",
            };
            HVML.post("page-load-begin", "doc",
                    "load",
                    JSON.stringify(data));
            document.open();
            window.addEventListener("load", (event) => {
                    let data = {
                        "src": "load",
                    };
                    HVML.post("page-loaded", "doc",
                            "load",
                            JSON.stringify(data));
            });

            document.write(msg.data);
            document.close();

            const interestedElements = document.querySelectorAll("[hvml-events]");
            if (interestedElements.length > 0)
                registerEventsListener(interestedElements);
            return { requestId: msg.requestId, state: "Ok" };
        }
        else if (msg.operation === 'writeBegin') {
            let data = {
                "src": "writeBegin",
            };
            HVML.post("page-load-begin", "doc",
                    "writeBegin",
                    JSON.stringify(data));
            document.open();
            document.write(msg.data);
            return { requestId: msg.requestId, state: "Ok" };
        }
        else if (msg.operation === 'writeMore') {
            document.write(msg.data);
            return { requestId: msg.requestId, state: "Ok" };
        }
        else if (msg.operation === 'writeEnd') {
            document.write(msg.data);
            document.close();
            let data = {
                "src": "writeEnd",
            };
            HVML.post("page-loaded", "doc",
                    "writeEnd",
                    JSON.stringify(data));

            const interestedElements = document.querySelectorAll("[hvml-events]");
            if (interestedElements.length > 0)
                registerEventsListener(interestedElements);
            return { requestId: msg.requestId, state: "Ok" };
        }
        else if (msg.operation === 'update') {
            if (msg.elementType === 'handle' || msg.elementType === 'id') {
                let elem;
                if (msg.elementType === 'id')
                    elem = document.getElementById(msg.element);
                else
                    elem = get_element_by_hvml_handle(msg.element);

                if (elem) {
                    if (!updateProperty(elem, msg.property, msg.data))
                        return { requestId: msg.requestId, state: "BadRequest" };
                }
                else {
                    return { requestId: msg.requestId, state: "NotFound" };
                }

                return { requestId: msg.requestId, state: "Ok" };
            }
            else if (msg.elementType === 'handles') {
                let handles = msg.element.split(',');
                let nr_updated = 0;
                for (let i = 0; i < handles.length; i++) {
                    let elem = get_element_by_hvml_handle(handles[i]);
                    if (elem) {
                        if (updateProperty(elem, msg.property, msg.data))
                            nr_updated++;
                    }
                }

                if (nr_updated == 0)
                    return { requestId: msg.requestId, state: "NotFound" };
                else if (nr_updated < handles.length)
                    return { requestId: msg.requestId, state: "PartialContent" };

                return { requestId: msg.requestId, state: "Ok" };
            }
        }
        else if (msg.operation === 'clear') {
            if (msg.elementType === 'handle' || msg.elementType === 'id') {
                let elem;
                if (msg.elementType === 'id')
                    elem = document.getElementById(msg.element);
                else
                    elem = get_element_by_hvml_handle(msg.element);

                if (elem) {
                    if (!clearElement(elem, msg.property))
                        return { requestId: msg.requestId, state: "BadRequest" };
                }
                else {
                    return { requestId: msg.requestId, state: "NotFound" };
                }

                return { requestId: msg.requestId, state: "Ok" };
            }
            else if (msg.elementType === 'handles') {
                let handles = msg.element.split(',');
                let nr_cleared = 0;
                for (let i = 0; i < handles.length; i++) {
                    let elem = get_element_by_hvml_handle(handles[i]);
                    if (elem) {
                        if (clearElement(elem, msg.property))
                            nr_cleared++;
                    }
                }

                if (nr_cleared == 0)
                    return { requestId: msg.requestId, state: "NotFound" };
                else if (nr_cleared < handles.length)
                    return { requestId: msg.requestId, state: "PartialContent" };

                return { requestId: msg.requestId, state: "Ok" };
            }
        }
        else if (msg.operation === 'erase') {
            if (msg.elementType === 'handle' || msg.elementType === 'id') {
                let elem;
                if (msg.elementType === 'id')
                    elem = document.getElementById(msg.element);
                else
                    elem = get_element_by_hvml_handle(msg.element);

                if (elem) {
                    if (!eraseElement(elem, msg.property))
                        return { requestId: msg.requestId, state: "BadRequest" };
                }
                else {
                    return { requestId: msg.requestId, state: "NotFound" };
                }

                return { requestId: msg.requestId, state: "Ok" };
            }
            else if (msg.elementType === 'handles') {
                let handles = msg.element.split(',');
                let nr_erased = 0;
                for (let i = 0; i < handles.length; i++) {
                    let elem = get_element_by_hvml_handle(handles[i]);
                    if (elem) {
                        if (eraseElement(elem, msg.property))
                            nr_erased++;
                    }
                }

                if (nr_erased == 0)
                    return { requestId: msg.requestId, state: "NotFound" };
                else if (nr_erased < handles.length)
                    return { requestId: msg.requestId, state: "PartialContent" };

                return { requestId: msg.requestId, state: "Ok" };
            }
        }
        else if (dom_update_ops.indexOf(msg.operation) !== -1) {
            const dom_update_funcs = {
                'plain': updateDocumentWithPlain,
                'html': updateDocumentWithHTML,
                'svg': updateDocumentWithSVG,
                'mathml': updateDocumentWithMathML,
                'xml': updateDocumentWithXML,
            };

            let update_func = dom_update_funcs[msg.dataType];
            if (!update_func) {
                return { requestId: msg.requestId, state: "BadRequest" };
            }

            if (msg.elementType === 'handle' || msg.elementType === 'id') {
                let elem;
                if (msg.elementType === 'id')
                    elem = document.getElementById(msg.element);
                else
                    elem = get_element_by_hvml_handle(msg.element);

                if (elem) {
                    if (!update_func(elem, msg.operation, msg))
                        return { requestId: msg.requestId, state: "BadRequest" };
                }
                else {
                    return { requestId: msg.requestId, state: "NotFound" };
                }

                return { requestId: msg.requestId, state: "Ok" };
            }
        }
        else if (msg.operation === 'callMethod') {
            let data = null;
            let state = "Ok";
            if (msg.elementType === 'handle' || msg.elementType === 'id') {
                let elem;
                if (msg.elementType === 'id')
                    elem = document.getElementById(msg.element);
                else
                    elem = get_element_by_hvml_handle(msg.element);

                if (elem) {
                    if (typeof(msg.data.method) != 'string')
                        state = "BadRequest";
                    else
                        data = callMethod(elem, msg.data.method, msg.data.arg);
                }
                else {
                    state = "NotFound";
                }

                return { requestId: msg.requestId, state: state, data: data };
            }
            else if (msg.elementType === 'void') {
                if (typeof(msg.data.method) != 'string')
                    state = "BadRequest";
                else
                    data = callMethod(document, msg.data.method, msg.data.arg);

                return { requestId: msg.requestId, state: state, data: data };
            }
        }
        else if (msg.operation === 'getProperty') {
            let data = null;
            let state = "Ok";
            if (msg.elementType === 'handle' || msg.elementType === 'id') {
                let elem;
                if (msg.elementType === 'id')
                    elem = document.getElementById(msg.element);
                else
                    elem = get_element_by_hvml_handle(msg.element);

                if (elem) {
                    data = getProperty(elem, msg.property);
                }
                else {
                    state = "NotFound";
                }

                return { requestId: msg.requestId, state: state, data: data };
            }
            else if (msg.elementType === 'void') {
                data = getProperty(document, msg.property);

                return { requestId: msg.requestId, state: state, data: data };
            }
        }
        else if (msg.operation === 'setProperty') {
            let data = null;
            let state = "Ok";
            if (msg.elementType === 'handle' || msg.elementType === 'id') {
                let elem;
                if (msg.elementType === 'id')
                    elem = document.getElementById(msg.element);
                else
                    elem = get_element_by_hvml_handle(msg.element);

                if (elem) {
                    if (typeof(msg.property) != 'string')
                        state = "BadRequest";
                    else
                        data = setProperty(elem, msg.property, msg.value);
                }
                else {
                    state = "NotFound";
                }

                return { requestId: msg.requestId, state: state, data: data };
            }
            else if (msg.elementType === 'void') {
                data = setProperty(document, msg.property, msg.data);
                return { requestId: msg.requestId, state: state, data: data };
            }
        }

        return { requestId: msg.requestId, state: "NotImplemented" };
    }

}

function registerEventsListener(elems)
{
    elems.forEach (function (elem) {
        if (get_element_hvml_handle(elem) != "" || elem.id != "") {
            let event_list = get_element_hvml_event_list(elem);
            for (let i = 0; i < event_list.length; i++) {
                let eventTokens = event_list[i].split(':');
                let eventName = eventTokens[0];
                let eventOpts = eventTokens[1];

                var optList = [];
                if (eventOpts)
                    optList = eventOpts.split(',');

                //console.log("eventName:eventOpts " + eventName + ":" + eventOpts);
                elem.addEventListener(eventName, function (evt) {
                    let data = {
                        targetTagName: evt.target.tagName,
                        targetHandle: get_element_hvml_handle(evt.target),
                        targetId: evt.target.id,
                        targetClass: evt.target.className,
                        targetValue: evt.target.value,
                        timeStamp: evt.timeStamp,
                        details: evt};

                    // TODO: handle more options
                    if (optList.includes('prevent') && evt.cancelable)
                        evt.preventDefault();
                    if (optList.includes('stop'))
                        evt.stopPropagation();

                    if (get_element_hvml_handle(evt.currentTarget) == "") {
                        HVML.post(evt.type, "id",
                                evt.currentTarget.id,
                                JSON.stringify(data));
                    }
                    else {
                        HVML.post(evt.type, "handle",
                                get_element_hvml_handle(evt.currentTarget),
                                JSON.stringify(data));
                    }
                });
            }
        }
        else {
            console.log("invalid hvmlHandle");
        }

    });
}

function updateProperty(elem, property, data)
{
    if (property === "textContent") {
        elem.textContent = data;
        return true;
    }
    else if (property == "content") {
        elem.replaceChildren();
        elem.append(data);
        return true;
    }
    else if (property.startsWith("attr.")) {
        let attr = property.substring(5);
        elem.setAttribute(attr, data);
        return true;
    }
    else if (property.startsWith("prop.")) {
        let name = property.substring(5);
        try {
            const method = new Function('ELEM', 'VALUE', 'ELEM.' + name + '=VALUE');
            method(elem, data);
        } catch (error) {
            console.error(error);
            return false;
        }

        return true;
    }

    return false;
}

function updateDocumentWithPlain(elem, op, msg)
{
    switch (op) {
        case 'append':
            elem.append(msg.data);
            break;
        case 'prepend':
            elem.prepend(msg.data);
            break;
        case 'insertBefore':
            elem.before(msg.data);
            break;
        case 'insertAfter':
            elem.after(msg.data);
            break;
        case 'displace':
            if (msg.property) {
                updateProperty(elem, msg.property, msg.data);
            }
            else {
                elem.replaceChildren();
                elem.append(msg.data);
            }
            break;
        default:
            return false;
    }

    return true;
}

function updateDocumentWithHTML(elem, op, msg)
{
    let fragment = new DocumentFragment();
    let container = document.createElement("div");
    container.innerHTML = msg.data;

    let nr_elements = container.children.length;
    if (nr_elements > 0) {

        const interestedElements = container.querySelectorAll("[hvml-events]");
        if (interestedElements.length > 0)
            registerEventsListener(interestedElements);

        /* have child elements, discard any Text node out all children. */
        while (container.firstChild) {
            fragment.appendChild(container.firstChild);
        }

        switch (op) {
            case 'append':
                elem.appendChild(fragment);
                break;
            case 'prepend':
                elem.insertBefore(fragment, elem.firstChild);
                break;
            case 'insertBefore':
                elem.parentNode.insertBefore(fragment, elem);
                break;
            case 'insertAfter':
                elem.parentNode.insertBefore(fragment, elem.nextSibling)
                break;
            case 'displace':
                elem.replaceChildren();
                elem.appendChild(fragment);
                break;
            default:
                return false;
        }
    }
    else {
        /* no child elements, treat as Text node. */
        switch (op) {
            case 'append':
                elem.append(msg.data);
                break;
            case 'prepend':
                elem.prepend(msg.data);
                break;
            case 'insertBefore':
                elem.before(msg.data);
                break;
            case 'insertAfter':
                elem.after(msg.data);
                break;
            case 'displace':
                if (msg.property) {
                    updateProperty(elem, msg.property, msg.data);
                }
                else {
                    elem.replaceChildren();
                    elem.append(msg.data);
                }
                break;
            default:
                return false;
        }
    }

    return true;
}

function updateDocumentWithDOMParser(elem, op, data, mime)
{
    const parser = new DOMParser();
    const doc = parser.parseFromString(data, mime);

    const errorNode = doc.querySelector('parsererror');
    if (errorNode) {
        console.log("Parsing failed: " + data);
        return false;
    }

    switch (op) {
        case 'append':
            while (doc.firstChild) {
                elem.appendChild(doc.firstChild);
            }
            break;
        case 'prepend':
            while (doc.firstChild) {
                elem.insertBefore(doc.firstChild, elem.firstChild);
            }
            break;
        case 'insertBefore':
            while (doc.firstChild) {
                elem.parentNode.insertBefore(doc.firstChild, elem);
            }
            break;
        case 'insertAfter':
            while (doc.firstChild) {
                elem.parentNode.insertBefore(doc.firstChild, elem.nextSibling)
            }
            break;
        case 'displace':
            elem.replaceChildren();
            while (doc.firstChild) {
                elem.appendChild(doc.firstChild);
            }
            break;
        default:
            return false;
    }

    return true;
}

function updateDocumentWithFragment(elem, op, frag)
{
    switch (op) {
        case 'append':
            while (frag.firstChild) {
                elem.appendChild(frag.firstChild);
            }
            break;
        case 'prepend':
            while (frag.firstChild) {
                elem.insertBefore(frag.firstChild, elem.firstChild);
            }
            break;
        case 'insertBefore':
            while (frag.firstChild) {
                elem.parentNode.insertBefore(frag.firstChild, elem);
            }
            break;
        case 'insertAfter':
            while (frag.firstChild) {
                elem.parentNode.insertBefore(frag.firstChild, elem.nextSibling)
            }
            break;
        case 'displace':
            elem.replaceChildren();
            while (frag.firstChild) {
                elem.appendChild(frag.firstChild);
            }
            break;
        default:
            return false;
    }

    return true;
}

function updateDocumentWithSVG(elem, op, msg)
{
    const content = '<svg xmlns="http://www.w3.org/2000/svg">' + msg.data + '</svg>';
    const parser = new DOMParser();
    const fragment = parser.parseFromString(content, 'text/html').body;

    return updateDocumentWithFragment(elem, op, fragment);
}

function updateDocumentWithMathML(elem, op, msg)
{
    return updateDocumentWithDOMParser(elem, op, msg.data, "application/mathml+xml");
}

function updateDocumentWithXML(elem, op, msg)
{
    return updateDocumentWithDOMParser(elem, op, msg.data, "application/xml");
}

function clearElement(elem, property)
{
    if (property === "textContent") {
        elem.textContent = "";
    }
    else if (property.startsWith("attr.")) {
        const attr = property.substring(5);
        elem.setAttribute(attr, "");
    }
    else
        elem.replaceChildren();

    return true;
}

function eraseElement(elem, property)
{
    if (property === "textContent") {
        elem.textContent = "";
    }
    else if (property.startsWith("attr.")) {
        try {
            const attr = property.substring(5);
            elem.removeAttribute(attr);
        } catch (error) {
            console.error(error);
            return false;
        }
    }
    else
        elem.remove();

    return true;
}

function getProperty(obj, property)
{
    try {
        const func = new Function('OBJ', 'return OBJ.' + property);
        return func(obj);
    } catch (error) {
        console.error(error);
        return null;
    }
}

function setProperty(obj, property, value)
{
    try {

        const func = new Function('OBJ', 'VALUE', 'OBJ.' + property + '=VALUE; return OBJ.' + property);
        return func(obj, value);
    }
    catch (error) {
        console.log("about to set property `" + property + "` of an element with Id is " + obj.id + " to `" + value + "`");
        console.error(error);
        return null;
    }
}

function callMethod(elem, method, arg)
{
    let funcBody;

    if (method.startsWith("call:")) {
        funcBody = method.substring(5);
    }
    else if (method.startsWith("set:")) {
        property = method.substring(4);
        funcBody = 'ELEMENT.' + property + '=ARG; return ELEMENT.' + property;
    }
    else if (method.startsWith("get:")) {
        property = method.substring(4);
        funcBody = 'return ELEMENT.' + property;
    }
    else if (arg) {
        funcBody = 'return ELEMENT.' + method + '(ARG)';
    }
    else {
        funcBody = 'return ELEMENT.' + method + '()';
    }

    try {
        const func = new Function('ELEMENT', 'ARG', funcBody);
        return func(elem, arg);
    } catch (error) {
        console.error(error);
        return null;
    }
}

