function checkHVML() {
    if (typeof(document.getElementByHVMLHandle) == "function") {
        if (typeof(HVML) == "object" && HVML.version >= @HVMLJS_VERSION@) {
            var elemStatus = document.getElementByHVMLHandle('731128');
            var elemRunner = document.getElementByHVMLHandle('790715');
            if (elemStatus && elemRunner) {
                elemStatus.textContent = 'Ready';
                elemRunner.textContent = '@' + HVML.hostName + '/' + HVML.appName + '/' + HVML.runnerName;
                return true;
            }
            else {
                console.log("A new HVML content loaded");
            }
        }
        else {
            console.log("Make sure to use the correct version of xGUI Pro");
        }
    }
    else {
        console.log("Make sure to use the tailored WebKit released by HVML community and the configuration option `ENABLE_HVML_ATTRS` is ON.");
    }

    return false;
}

if (checkHVML()) {
    HVML.onrequest = function (json) {
        const dom_update_ops = ['append', 'prepend', 'insertAfter', 'insertBefore', 'displace'];

        msg = JSON.parse(json);
        console.log("HVML.onrequest called: " + msg.operation);

        if (msg.operation === 'load') {
            document.open();
            document.write(msg.data);
            document.close();

            console.log("checking elements with hvml:events attribute...");
            const interestedElements = document.querySelectorAll(".hvml-events");
            if (interestedElements.length > 0)
                registerEventsListener(interestedElements);
            return { requestId: msg.requestId, state: "Ok" };
        }
        else if (msg.operation === 'writeBegin') {
            document.open();
            document.write(msg.data);
            return { requestId: msg.requestId, state: "Ok" };
        }
        else if (msg.operation === 'writeMore') {
            document.write(msg.data);
            return { requestId: msg.requestId, state: "Ok" };
        }
        else if (msg.operation === 'writeEnd') {
            document.write(msg.data);
            document.close();

            console.log("checking elements with hvml:events attribute...");
            const interestedElements = document.querySelectorAll(".hvml-events");
            if (interestedElements.length > 0)
                registerEventsListener(interestedElements);
            return { requestId: msg.requestId, state: "Ok" };
        }
        else if (msg.operation === 'update') {
            if (msg.elementType === 'handle') {
                var elem = document.getElementByHVMLHandle(msg.element);
                if (elem) {
                    if (!updateProperty(elem, msg.property, msg.data))
                        return { requestId: msg.requestId, state: "BadRequest" };
                }
                else {
                    return { requestId: msg.requestId, state: "NotFound" };
                }

                return { requestId: msg.requestId, state: "Ok" };
            }
            else if (msg.elementType === 'handles') {
                var handles = msg.element.split(',');
                var nr_updated = 0;
                for (var i = 0; i < handles.length; i++) {
                    var elem = document.getElementByHVMLHandle(handles[i]);
                    if (elem) {
                        if (updateProperty(elem, msg.property, msg.data))
                            nr_updated++;
                    }
                }

                if (nr_updated == 0)
                    return { requestId: msg.requestId, state: "NotFound" };
                else if (nr_updated < handles.length)
                    return { requestId: msg.requestId, state: "PartialContent" };

                return { requestId: msg.requestId, state: "Ok" };
            }
        }
        else if (msg.operation === 'clear') {
            if (msg.elementType === 'handle') {
                var elem = document.getElementByHVMLHandle(msg.element);
                if (elem) {
                    if (!clearElement(elem, msg.property))
                        return { requestId: msg.requestId, state: "BadRequest" };
                }
                else {
                    return { requestId: msg.requestId, state: "NotFound" };
                }

                return { requestId: msg.requestId, state: "Ok" };
            }
            else if (msg.elementType === 'handles') {
                var handles = msg.element.split(',');
                var nr_cleared = 0;
                for (var i = 0; i < handles.length; i++) {
                    var elem = document.getElementByHVMLHandle(handles[i]);
                    if (elem) {
                        if (clearElement(elem, msg.property))
                            nr_cleared++;
                    }
                }

                if (nr_cleared == 0)
                    return { requestId: msg.requestId, state: "NotFound" };
                else if (nr_cleared < handles.length)
                    return { requestId: msg.requestId, state: "PartialContent" };

                return { requestId: msg.requestId, state: "Ok" };
            }
        }
        else if (msg.operation === 'erase') {
            if (msg.elementType === 'handle') {
                var elem = document.getElementByHVMLHandle(msg.element);
                if (elem) {
                    if (!eraseElement(elem, msg.property))
                        return { requestId: msg.requestId, state: "BadRequest" };
                }
                else {
                    return { requestId: msg.requestId, state: "NotFound" };
                }

                return { requestId: msg.requestId, state: "Ok" };
            }
            else if (msg.elementType === 'handles') {
                var handles = msg.element.split(',');
                var nr_erased = 0;
                for (var i = 0; i < handles.length; i++) {
                    var elem = document.getElementByHVMLHandle(handles[i]);
                    if (elem) {
                        if (eraseElement(elem, msg.property))
                            nr_erased++;
                    }
                }

                if (nr_erased == 0)
                    return { requestId: msg.requestId, state: "NotFound" };
                else if (nr_erased < handles.length)
                    return { requestId: msg.requestId, state: "PartialContent" };

                return { requestId: msg.requestId, state: "Ok" };
            }
        }
        else if (dom_update_ops.indexOf(msg.operation) !== -1) {
            if (msg.elementType === 'handle') {
                var elem = document.getElementByHVMLHandle(msg.element);
                if (elem) {
                    if (!updateDocument(elem, msg.operation, msg.data))
                        return { requestId: msg.requestId, state: "BadRequest" };
                }
                else {
                    return { requestId: msg.requestId, state: "NotFound" };
                }

                return { requestId: msg.requestId, state: "Ok" };
            }
        }
        else if (msg.operation === 'callMethod') {
            // return onCallMethod(msg);
        }

        return { requestId: msg.requestId, state: "NotImplemented" };
    }

}

function registerEventsListener(elems)
{
    console.log("registerEventsListener called");

    elems.forEach (function (elem) {
        if (elem.hvmlHandle !== 0) {
            console.log("elem.hvmlEventList: " + elem.hvmlEventList.length);
            for (let i = 0; i < elem.hvmlEventList.length; i++) {
                let eventName = elem.hvmlEventList.item(i);

                elem.addEventListener(eventName, function (evt) {
                        evt.preventDefault();
                        HVML.post(evt.target.hvmlHandleText,
                                evt.type, JSON.stringify(evt));
                });
            }
        }
        else {
            console.log("invalid hvmlHandle");
        }

    });
}

function updateProperty(elem, property, data)
{
    if (property === "textContent") {
        elem.textContent = data;
        return true;
    }
    else if (property.startsWith("attr.")) {
        var attr = property.substring(5);
        elem.setAttribute(attr, data);
        return true;
    }

    return false;
}

function updateDocument(elem, op, data)
{
    let fragment = new DocumentFragment();
    let container = document.createElement("div");
    container.innerHTML = data;

    let nr_elements = container.children.length;
    if (nr_elements > 0) {

        const interestedElements = container.querySelectorAll(".hvml-events");
        if (interestedElements.length > 0)
            registerEventsListener(interestedElements);

        /* have child elements, discard any Text node out all children. */
        while (container.firstChild) {
            fragment.appendChild(container.firstChild);
        }

        switch (op) {
            case 'append':
                elem.appendChild(fragment);
                break;
            case 'prepend':
                elem.insertBefore(fragment, elem.firstChild);
                break;
            case 'insertBefore':
                elem.parentNode.insertBefore(fragment, elem);
                break;
            case 'insertAfter':
                elem.parentNode.insertBefore(fragment, elem.nextSibling)
                break;
            case 'displace':
                elem.replaceChildren();
                elem.appendChild(fragment);
                break;
            default:
                return false;
        }
    }
    else {
        /* no child elements, treat as Text node. */
        switch (op) {
            case 'append':
                elem.append(data);
                break;
            case 'prepend':
                elem.prepend(data);
                break;
            case 'insertBefore':
                elem.before(data);
                break;
            case 'insertAfter':
                elem.after(data);
                break;
            case 'displace':
                elem.replaceChildren();
                elem.append(data);
                break;
            default:
                return false;
        }
    }

    return true;
}

function clearElement(elem, property)
{
    if (property === "textContent") {
        elem.textContent = "";
    }
    else if (property.startsWith("attr.")) {
        var attr = property.substring(5);
        elem.setAttribute(attr, "");
    }
    else
        elem.replaceChildren();

    return true;
}

function eraseElement(elem, property)
{
    if (property === "textContent") {
        elem.textContent = "";
    }
    else if (property.startsWith("attr.")) {
        var attr = property.substring(5);
        elem.removeAttribute(attr);
    }
    else
        elem.remove();

    return true;
}

